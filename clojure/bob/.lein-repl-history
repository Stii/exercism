(use 'bob)
(response-for "hello world")
(use 'bob)
(response-for "HALLO!")
(response-for "hello world")
(response-for "HALLO!")
(use 'bob)
(use 'bob :reload-all)
(response-for "HALLO!")
(response-for "hello world")
(empty? "      ")
(empty? "")
(empty? "     ")
(frequencies "         ")
(empty? (trim "            "))
(use 'bob :reload-all)
(blank? " ")
(clojure.string/blank? " ")
(use 'bob :reload-all)
(response-for "HALLO!")
(frequencies (map #(Character/isUpperCase %) "HAllO"))
(def forceful (frequencies (map #(Character/isUpperCase %) "HAllO")))
(> (get forceful true) (get forceful false))
(use 'bob :reload-all)
(response-for "HALLO!")
(response-for "Halo!")
(response-for "Halo")
(response-for "Halo.")
(use 'bob :reload-all)
(response-for "Halo.")
(response-for "Halo!")
(response-for "Halo?")
(last "Halo?")
(use 'bob :reload-all)
(last "Halo?")
(response-for "Halo?")
(response-for )
(response-for)
(response-for " ")
(use 'bob :reload-all)
(response-for " ")
(use 'bob :reload-all)
(response-for " ")
(clojure.string/blank? " ")
(clojure.string/blank? "s")
(use 'bob :reload-all)
(response-for " ")
(response-for "")
(use 'bob :reload-all)
(response-for "")
(clojure.string/blank? "")
(clojure.string/blank?)
(clojure.string/blank? \ )
(clojure.string/replace "    " \  "")
(response-for "")
(defn has-letter? [msg] (some #(Character/isLetter (int %)) msg))
(has-letter? "1 2 3 GO!")
(has-letter? "1, 2, 3")
(defn has-letter? [msg] (some #(Character/isLetter %) msg))
(has-letter? "1, 2, 3")
(has-letter? "1 2 3 GO!")
(has-letter? "1, 2, 3, GO!")
(use 'bob :reload-all)
(response-for "")
